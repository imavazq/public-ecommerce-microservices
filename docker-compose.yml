services:
  postgres:
    container_name: ms_pg_sql
    image: postgres:16
    environment:
      POSTGRES_USER: imavazq
      POSTGRES_PASSWORD: imavazq
      PGDATA: /var/lib/postgresql/data
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - 5434:5432
    networks:
      - microservices-net
    restart: unless-stopped

  #  pgadmin: #DESCOMENTAR SI NO SE TIENE INSTALADO PGADMIN4
  #    container_name: ms_pgadmin
  #    image: dpage/pgadmin4
  #    environment:
  #      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin@pgadmin.org}
  #      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
  #      PGADMIN_CONFIG_SERVER_MODE: 'False'
  #    volumes:
  #      - pgadmin:/var/lib/pgadmin
  #    ports:
  #      - 5050:80
  #    networks:
  #      - microservices-net
  #    restart: unless-stopped

  mongodb:
    container_name: ms_mongo_db
    image: mongo
    ports:
      - 27017:27017
    volumes:
      - mongo:/data
    environment:
      MONGO_INITDB_ROOT_USERNAME: imavazq
      MONGO_INITDB_ROOT_PASSWORD: imavazq

  mongo-express:
    container_name: ms_mongo_express
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: imavazq
      ME_CONFIG_MONGODB_ADMINPASSWORD: imavazq
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_BASICAUTH: 'false'
      #ME_CONFIG_BASICAUTH_USERNAME: imavazq
      #ME_CONFIG_BASICAUTH_PASSWORD: imavazq

#    mail-dev: #Para envio de mails Notification service
#      container_name: ms_mail_dev
#      image: maildev/maildev
#      ports:
#        - 1080:1080
#        - 1025:1025 #SMTP server

  #CONFIGURACION KAFKA
  zookeeper: #usado por Kafka para gestionar coordinacion entre brokers y almacenar metadatos
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment: #agregamos configuraciones para uso local (al deployar es necesario agregar otras)
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181 #puerto cliente default
      ZOOKEEPER_TICK_TIME: 2000 #2 seg de tiempo base para realizar tareas internas
    ports:
      - 22181:2181
    networks:
      - microservices-net
  kafka:
    image: confluentinc/cp-kafka:latest #imagen oficial confluent
    container_name: ms_kafka
    ports:
      - 9092:9092
    depends_on:
      - zookeeper #kafka broker necesita que se este ejecutando antes zookeeper
    environment:
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1 #una unica replica (local) para posicion inicial de lectura (offset) para consumidores del broker
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1 #una unica replica (local) para almacenamiento de estado de transacciones
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1 #nro replicas que deben estar sincronizadas para que transaccion sea valida
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181 #para la url usamos nombre de service declarado
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT #protocolo de seguridad para listeners PLAINTEXT (sin cifrado) para conex internas y externas
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092 #puerto para conexion a kafka
    networks:
      - microservices-net

networks:
  microservices-net: #ecosistema microservicios
    driver: bridge

volumes:
  postgres:
  pgadmin:
  mongo: