spring:
  data:
    mongodb:
      username: imavazq #mismas credenciales definidas para db levantada en docker
      password: imavazq
      host: localhost
      port: 27017
      database: notification
      authentication-database: admin
  kafka:
    consumer: #notification es consumer
      bootstrap-servers: localhost:9092 #direccion server kafka broker
      group-id: paymentGroup, orderGroup #grupos de consumidores al que pertenece consumer (consume payment-topic y order-topic)
      auto-offset-reset: earliest #consumer lee todos los msg disponibles en el topic desde el principio
      key-deserializer: org.apache.kafka.common.serialization.StringSerializer #deserializamos claves string
      value-deserializer: org.springframework.kafka.support.serializer.JsonSerializer #deserializamos a java object el JSON object
      properties:
        #como consumimos paquetes desconocidos para mapeo de mensaje consumido, especificamos que son confiables:
        spring.json.trusted.packages: 'com.imavazq.ecommerce.*'
        #indicamos como mapear los mensajes JSON a clases Java
        #indicamos ubicacion clases a mapear los mensajes consumidos orderConfirmation y paymentConfirmation
        spring.json.type.mapping: orderConfirmation:com.imavazq.ecommerce.kafka.OrderConfirmation,paymentConfirmation:com.imavazq.ecommerce.kafka.PaymentConfirmation
  mail:
    host: localhost #usamos DevMail local como server SMTP
    port: 1025 #mismo que definido para DevMail en docker-compose.yml
    username: imavazq
    password: imavazq
    properties:
      mail:
        smtp:
          trust: '*' #confiamos en conexiones de server SMTP
        auth: true #autenticacion habilitada en server SMTP
        starttls:
          enabled: true #habilitamos protocolo STARTTLS para cifrar y asegurar conexion
        connectiontimeout: 5000 #5seg
        timeout: 3000
        writetimeout: 5000

server:
  port: 8040
